1. Write a program to print all Subsequences of String which Start with Vowel and End with Consonant
Given a string return all possible subsequences which start with vowel and end with a consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
Examples:
Input : ‘abc’
Output : ab, ac, abc
Input : ‘aab’
Output : ab, aab

#include <bits/stdc++.h> 
using namespace std; 
  
// Set to store all the subsequences 
set<string> st; 
  
// Utility method to check vowel 
bool isVowel(char c) 
{ 
    return (c == 'a' or c == 'e' or 
            c == 'i' or c == 'o' or 
            c == 'u'); 
} 
  
// Utility method to check consonant 
bool isConsonant(char c) 
{ 
    return !isVowel(c); 
} 
  
// It computes all the possible substring that 
// starts with vowel and end with consonent 
void subsequence(string str) 
{ 
    // iterate over the entire string 
    for (int i = 0; i < str.length(); i++) 
    { 
        // test ith character for vowel 
        if (isVowel(str[i])) 
        { 
            // if the ith character is vowel 
            // iterate from end of the string 
            // and check for consonant. 
            for (int j = str.length() - 1; j >= i; j--) 
            { 
                // test jth character for consonant. 
                if (isConsonant(str[j])) 
                { 
                    // once we get a consonant add it to 
                    // the hashset 
                    string str_sub = str.substr(i, j + 1); 
                    st.insert(str_sub); 
  
                    // drop each character of the substring 
                    // and recur to generate all subsequence 
                    // of the substring 
                    for (int k = 1; k < str_sub.length() - 1; k++) 
                    { 
                        string sb = str_sub; 
                        sb.erase(sb.begin() + k); 
                        subsequence(sb); 
                    } 
                } 
            } 
        } 
    } 
} 
  
// Driver Code 
int main() 
{ 
    string s = "xabcef"; 
    subsequence(s); 
  
    for (auto i : st) 
        cout << i << " "; 
    cout << endl; 
  
    return 0; 
} 


2. Find the row with maximum number of 1s?
Given a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.
Example
Input matrix
0 1 1 1
0 0 1 1
1 1 1 1  // this row has maximum 1s
0 0 0 0



#include <bits/stdc++.h> 
using namespace std; 
#define R 4  
#define C 4  
  
// Function to find the index of first index  
// of 1 in a boolean array arr[]  
int first(bool arr[], int low, int high)  
{  
    if(high >= low)  
    {  
        // Get the middle index  
        int mid = low + (high - low)/2;  
      
        // Check if the element at middle index is first 1  
        if ( ( mid == 0 || arr[mid-1] == 0) && arr[mid] == 1)  
            return mid;  
      
        // If the element is 0, recur for right side  
        else if (arr[mid] == 0)  
            return first(arr, (mid + 1), high);  
          
        // If element is not first 1, recur for left side  
        else
            return first(arr, low, (mid -1));  
    }  
    return -1;  
}  
  
// Function that returns index of row  
// with maximum number of 1s.  
int rowWithMax1s(bool mat[R][C])  
{  
    // Initialize max values  
    int max_row_index = 0, max = -1;  
  
    // Traverse for each row and count number of 1s  
    // by finding the index of first 1  
    int i, index;  
    for (i = 0; i < R; i++)  
    {  
        index = first (mat[i], 0, C-1);  
        if (index != -1 && C-index > max)  
        {  
            max = C - index;  
            max_row_index = i;  
        }  
    }  
  
    return max_row_index;  
}  
  
// Driver Code  
int main()  
{  
    bool mat[R][C] = { {0, 0, 0, 1},  
                    {0, 1, 1, 1},  
                    {1, 1, 1, 1},  
                    {0, 0, 0, 0}};  
  
    cout << "Index of row with maximum 1s is " << rowWithMax1s(mat);  
  
    return 0;  
}  
  

3. . Java Program to remove duplicate characters from String.


#include <bits/stdc++.h> 
using namespace std; 
  
char *removeDuplicate(char str[], int n) 
{ 
   // Used as index in the modified string 
   int index = 0;    
     
   // Traverse through all characters 
   for (int i=0; i<n; i++) { 
         
     // Check if str[i] is present before it   
     int j;   
     for (j=0; j<i; j++)  
        if (str[i] == str[j]) 
           break; 
       
     // If not present, then add it to 
     // result. 
     if (j == i) 
        str[index++] = str[i]; 
   } 
     
   return str; 
} 
  
// Driver code 
int main() 
{ 
   char str[]= "geeksforgeeks"; 
   int n = sizeof(str) / sizeof(str[0]); 
   cout << removeDuplicate(str, n); 
   return 0; 
} 


