1. Write a program to print all Subsequences of String which Start with Vowel and End with Consonant
Given a string return all possible subsequences which start with vowel and end with a consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
Examples:
Input : ‘abc’
Output : ab, ac, abc
Input : ‘aab’
Output : ab, aab
SOLUTION:
import java.util.HashSet; 
  
public class Subsequence { 
  
    
    static HashSet<String> st = new HashSet<>(); 
  
    static void subsequence(String str) 
    { 
        
        for (int i = 0; i < str.length(); i++) { 
          
             
            if (isVowel(str.charAt(i))) { 
          
                
                for (int j = (str.length() - 1); j >= i; j--) { 
                      
                    
                    if (isConsonant(str.charAt((j)))) { 
                      
                        
                        String str_sub = str.substring(i, j + 1); 
                        st.add(str_sub); 
  
                        
                        for (int k = 1; k < str_sub.length() - 1; k++) { 
                            StringBuffer sb = new StringBuffer(str_sub); 
                            sb.deleteCharAt(k); 
                            subsequence(sb.toString()); 
                        } 
                    } 
                } 
            } 
        } 
    } 
} 
   static boolean isVowel(char c) 
    { 
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o'
                                              || c == 'u'); 
    }    
    static boolean isConsonant(char c) 
    { 
        return !isVowel(c); 
    } 
    public static void main(String[] args) 
    { 
        String s = "xabcef"; 
        subsequence(s); 
        System.out.println(st); 
    } 
}

2. Find the row with maximum number of 1s?
Given a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.
Example
Input matrix
0 1 1 1
0 0 1 1
1 1 1 1  // this row has maximum 1s
0 0 0 0
SOLUTI0N:
import java.io.*; 

class GFG { 
	static int R = 4, C = 4; 
	
	static int first(int arr[], int low, int high) 
	{ 
		if (high >= low) { 
			
			int mid = low + (high - low) / 2; 

			
			if ((mid == 0 || (arr[mid - 1] == 0)) && arr[mid] == 1) 
				return mid; 

			
			else if (arr[mid] == 0) 
				return first(arr, (mid + 1), high); 
				
			 
			else
				return first(arr, low, (mid - 1)); 
		} 
		return -1; 
	} 
 
	static int rowWithMax1s(int mat[][]) 
	{ 
		
		int max_row_index = 0, max = -1; 

		
		int i, index; 
		for (i = 0; i < R; i++) { 
			index = first(mat[i], 0, C - 1); 
			if (index != -1 && C - index > max) { 
				max = C - index; 
				max_row_index = i; 
			} 
		} 

		return max_row_index; 
	} 
	
	public static void main(String[] args) 
	{ 
		int mat[][] = { { 0, 0, 0, 1 }, 
						{ 0, 1, 1, 1 }, 
						{ 1, 1, 1, 1 }, 
						{ 0, 0, 0, 0 } }; 
		System.out.println("Index of row with maximum 1s is "		+ rowWithMax1s(mat)); 
	} 
} 





3. Java Program to remove duplicate characters from String.7
SOLUTION:
import java.util.*; 

class GFG 
{ 
	static String removeDuplicate(char str[], int n) 
	{ 
		
		int index = 0; 

		
		for (int i = 0; i < n; i++) 
		{ 

			
			int j; 
			for (j = 0; j < i; j++) 
			{ 
				if (str[i] == str[j]) 
				{ 
					break; 
				} 
			} 

			
			if (j == i) 
			{ 
				str[index++] = str[i]; 
			} 
		} 
		return String.valueOf(Arrays.copyOf(str, index)); 
	} 

	 
	public static void main(String[] args) 
	{ 
		char str[] = "geeksforgeeks".toCharArray(); 
		int n = str.length; 
		System.out.println(removeDuplicate(str, n)); 
	} 
} 
