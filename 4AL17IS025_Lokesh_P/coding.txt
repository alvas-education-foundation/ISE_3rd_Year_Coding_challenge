1) In Python, a string can be split on a delimiter.
Example:
>>> a = "this is a string"
>>> a = a.split(" ") # a is converted to a list of strings. 
>>> print a
['this', 'is', 'a', 'string']
Joining a string is simple:
>>> a = "-".join(a)
>>> print a
this-is-a-string 
Task
You are given a string. Split the string on a " " (space) delimiter and join using a - hyphen.
Input Format
The first line contains a string consisting of space separated words.
Output Format
Print the formatted string as explained above.
Sample Input
this is a string   
Sample Output
this-is-a-string

def split_and_join(line):
    # write your code heredef split_and_join(line):
    x=line.split(" ") 
    x='-'.join(x)    
    return x
    print('-'.join(input().split()))
if __name__ == '__main__':

2) You are given the firstname and lastname of a person on two different lines. Your task is to read them and print the following:
Hello firstname lastname! You just delved into python.
Input Format
The first line contains the first name, and the second line contains the last name.
Constraints
The length of the first and last name ≤ .
Output Format
Print the output as mentioned above.
Sample Input 0
Ross
Taylor
Sample Output 0
Hello Ross Taylor! You just delved into python.
Explanation 0
The input read by the program is stored as a string data type. A string is a collection of characters.
def print_full_name(a, b):
   print("Hello {} {}! You just delved into python.".format(first_name,last_name))

if __name__ == '__main__':



3) We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed).
Let's try to understand this with an example.
You are given an immutable string, and you want to make changes to it.
Example
>>> string = "abracadabra"
You can access an index by:
>>> print string[5]
a
What if you would like to assign a value?
>>> string[5] = 'k' 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
How would you approach this?
•	One solution is to convert the string to a list and then change the value.
Example
>>> string = "abracadabra"
>>> l = list(string)
>>> l[5] = 'k'
>>> string = ''.join(l)
>>> print string
abrackdabra
•	Another approach is to slice the string and join it back.
Example
>>> string = string[:5] + "k" + string[6:]
>>> print string
abrackdabra
Task
Read a given string, change the character at a given index and then print the modified string.
Input Format
The first line contains a string, .
The next line contains an integer , denoting the index location and a character  separated by a space.
Output Format
Using any of the methods explained above, replace the character at index  with character .
Sample Input
abracadabra
5 k
Sample Output
abrackdabra


def mutate_string(string, position, character):
    list2=list(string)
    list2[position]=character      
    return ''.join(list2)
if __name__ == '__main__':

