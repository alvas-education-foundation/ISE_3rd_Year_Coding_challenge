1.Using inheritance, one class can acquire the properties of others. Consider the following Animal class:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Animal{
	void walk(){
		System.out.println("I am walking");
	}
}

class Bird extends Animal {

    void fly() {
        System.out.println("I am flying");
    }

    void sing() {
        System.out.println("I am singing");
    }
}

public class Solution{

   public static void main(String args[]){

	  Bird bird = new Bird();
	  bird.walk();
	  bird.fly();
      bird.sing();
	
   }
}

Your Output (stdout)
I am walking
I am flying
I am singing
Expected Output
Download
I am walking
I am flying
I am singing


2.Functions are a bunch of statements glued together. A function is provided with zero or more arguments, and it executes the statements on it. Based on the return type, it either returns nothing (void) or something.




#include <iostream>
#include <cstdio>
using namespace std;

int max_of_four(int *a){
    int max = a[0];
    
    for(int i=1; i<=3; i++){
        if(a[i]>max)
            max=a[i];
    }
    
    return max;        
}

int main() { 
    int a[4];
    scanf("%d %d %d %d", &a[0], &a[1], &a[2], &a[3]);
    int ans = max_of_four(a);
    printf("%d", ans);
    
    return 0;
}


Input (stdin)
Download
3
4
6
5
Your Output (stdout)
6



3.A prime number is a natural number greater than  whose only positive divisors are  and itself. For example, the first six prime numbers are , , , , , and .

Given a large integer, , use the Java BigInteger class' isProbablePrime method to determine and print whether it's prime or not prime.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        String n = scanner.nextLine();
        BigInteger number = new BigInteger(n);
        if (number.isProbablePrime(1)) {
            System.out.println("prime");
        } else {
            System.out.println("not prime");
        }
        scanner.close();
    }
}


Input (stdin)
Download
13
Your Output (stdout)
prime

4.Sometimes it's better to use dynamic size arrays. Java's Arraylist can provide you this feature. Try to solve this problem using Arraylist.

You are given  lines. In each line there are zero or more integers. You need to answer a few queries where you need to tell the number located in  position of  line.


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        ArrayList<ArrayList<Integer> >arrList = new ArrayList<ArrayList<Integer> >();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
            int col = sc.nextInt();
            arrList.add(new ArrayList<Integer>(col)); 
            for(int j=0;j<col;j++)
            {
                int num = sc.nextInt();
                arrList.get(i).add(num);
            }
        }
        int q = sc.nextInt();
        for(int i=0;i<q;i++)
        {
            int x = sc.nextInt();
            int y = sc.nextInt();
            try{
                System.out.println(arrList.get(x-1).get(y-1));
            }
            catch(IndexOutOfBoundsException e)
            {
                System.out.println("ERROR!");
            }
        }
    }
}

Input (stdin)
Download
5
5 41 77 74 22 44
1 12
4 37 34 36 52
0
3 20 22 33
5
1 3
3 4
3 1
4 3
5 5
Your Output (stdout)
74
52
37
ERROR!
ERROR!