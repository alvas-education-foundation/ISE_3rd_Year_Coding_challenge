j

st=input()
rev=st[::-1]
if(rev==st):
    print("Palindrome")
else:
    print("Not a Plaindrome")


import java.util.Scanner;
import java.util.regex.*;

public class Solution
{
   public static void main(String[] args){
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());
      while(testCases>0){
         String pattern = in.nextLine();
          testCases--;
    try
    {
        Pattern.compile(pattern);
        System.out.println("Valid");
    }
      catch (Exception e)
          {
          System.out.println("Invalid");
      }
      }
   }
}


import java.util.*;
class Student{
   private int id;
   private String fname;
   private double cgpa;
   public Student(int id, String fname, double cgpa) {
      super();
      this.id = id;
      this.fname = fname;
      this.cgpa = cgpa;
   }
   public int getId() {
      return id;
   }
   public String getFname() {
      return fname;
   }
   public double getCgpa() {
      return cgpa;
   }
}
class StudentComparator implements Comparator<Student>{
@Override
	public int compare(Student s1, Student s2) {
	double cgpa1 = s1.getCgpa();
	double cgpa2 = s2.getCgpa();
	if(Math.abs(cgpa1 - cgpa2)<0.00000001){
	int fnameCom = s1.getFname().compareTo(s2.getFname());
	if(fnameCom==0)return s1.getId()-s2.getId(); 
	else 
	return fnameCom;
	}
	else return (cgpa1<cgpa2)?1:-1;
	}
}
public class Solution
{
	public static void main(String[] args){
	Scanner in = new Scanner(System.in);
	int testCases = Integer.parseInt(in.nextLine());
	List<Student> studentList = new ArrayList<Student>();
	while(testCases>0){
		int id = in.nextInt();
		String fname = in.next();
		double cgpa = in.nextDouble();
		Student st = new Student(id, fname, cgpa);
		studentList.add(st);
		testCases--;
		}
		Collections.sort(studentList, new StudentComparator());
		for(Student st: studentList){
			System.out.println(st.getFname());
		}
	}
}


m

import java.util.Scanner;
 
public class CheckForBinary
{
   static void numBinaryOrNot(int num)
   {
    boolean isBinary = true;
 
    int copyNum = num;
 
    while (copyNum != 0)
    {
      int temp = copyNum%10;  
 
      if(temp > 1)
       {
         isBinary = false;
         break;
       }
        else
       {
         copyNum = copyNum/10;    
       }
    }
 
     if (isBinary)
     {
        System.out.println(num+" is a binary number");
     }
     else
     {
        System.out.println(num+" is not a binary number");
     }
   }
 
  public static void main(String[] args)
  {
    Scanner sc=new Scanner(System.in);
    
    System.out.println("Enter a number");
    int num = sc.nextInt();
 
    numBinaryOrNot(num);
  }
}


class JavaExample  
{ 
    static int checkPrime(int num) 
    { 
	int i, flag = 0; 
	for(i = 2; i<= num / 2; i++) 
	{ 
	   if(num % i == 0) 
	   { 
	       flag = 1; 
	       break; 
	   } 
	} 
	if(flag == 0) 
	   return 1; 
	else
	   return 0; 
    } 
    static void printAltPrime(int n) 
    {
	int temp = 2; 

	for(int num = 2; num <= n-1; num++) 
	{ 
	   if (checkPrime(num) == 1) 
	   {  
		if (temp % 2 == 0) 
		   System.out.print(num + " "); 

		temp ++; 
	   } 
	} 
    } 

    public static void main(String[] args)  
    { 
	int num = 20; 
	System.out.print("Alternate prime numbers upto " + num+" are: ");  
	printAltPrime(num); 
    } 
}



class prog3{ 
      
    public static void main(String args[]) 
    { 
        int n = 6; 
      
        printPattern(n); 
    } 
      
    static void printPattern(int n) 
    { 
        int i, j, k = 0; 
        for (i = 1; i <= n; i++) // row=6 
        { 
            // Print spaces 
            for (j = i; j < n; j++) { 
                System.out.print(" "); 
            }  
            while (k != (2 * i - 1)) { 
                if (k == 0 || k == 2 * i - 2) 
                    System.out.print("*"); 
                else
                    System.out.print(" "); 
                k++; 
                ; 
            } 
            k = 0; 
            System.out.println();  
        } 
        for (i = 0; i < 2 * n - 1; i++) { 
            System.out.print("*"); 
        } 
    } 
} 

n
Challenge-1: Write an SQL query to show one row twice in results from a table.

Answer:
select FIRST_NAME, DEPARTMENT from worker W where W.DEPARTMENT='HR' 
union all 
select FIRST_NAME, DEPARTMENT from Worker W1 where W1.DEPARTMENT='HR';
....................................................................................................................................
Challenge-2: Write an SQL query to fetch the last five records from a table.

Answer:
SELECT * FROM Worker WHERE WORKER_ID <=5
UNION
SELECT * FROM (SELECT * FROM Worker W order by W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID <=5;
....................................................................................................................................
Challenge-3: Write an SQL query to show the last record from a table.

Answer:
Select * from Worker where WORKER_ID = (SELECT max(WORKER_ID) from Worker);
....................................................................................................................................
Challenge-4: Write an SQL query to print the name of employees having the highest salary in each department.

Answer:
SELECT t.DEPARTMENT,t.FIRST_NAME,t.Salary from(SELECT max(Salary) as TotalSalary,DEPARTMENT from Worker group by DEPARTMENT) as TempNew 
Inner Join Worker t on TempNew.DEPARTMENT=t.DEPARTMENT 
 and TempNew.TotalSalary=t.Salary;



s


#include <math.h>
#include <stdio.h>

float calcSD(float data[]);
int main() {
    int i,n;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    float data[n];
    printf("Enter array elements: ");
    for (i = 0; i < n; ++i)
        scanf("%f", &data[i]);
    printf("\nStandard Deviation = %.1f", calcSD(data));
    return 0;
}

float calcSD(float data[]) {
    float sum = 0.0, mean, SD = 0.0;
    int i;
    for (i = 0; i < 10; ++i) {
        sum += data[i];
    }
    mean = sum / 10;
    for (i = 0; i < 10; ++i)
        SD += pow(data[i] - mean, 2);
    return sqrt(SD / 10);
}


#include <math.h>
#include <stdio.h>

float calcSD(float data[]);
int main() {
    int i,n;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    float data[n];
    printf("Enter array elements: ");
    for (i = 0; i < n; ++i)
        scanf("%f", &data[i]);
    printf("\nStandard Deviation = %.1f", calcSD(data));
    return 0;
}

float calcSD(float data[]) {
    float sum = 0.0, mean, SD = 0.0;
    int i;
    for (i = 0; i < 10; ++i) {
        sum += data[i];
    }
    mean = sum / 10;
    for (i = 0; i < 10; ++i)
        SD += pow(data[i] - mean, 2);
    return sqrt(SD / 10);
}


#include <bits/stdc++.h>  
using namespace std; 

int difference(int arr[][MAX], int n) 
{ 
	int d1 = 0, d2 = 0; 

	for (int i = 0; i < n; i++) 
	{ 
		for (int j = 0; j < n; j++) 
		{ 
			if (i == j) 
				d1 += arr[i][j];
			if (i == n - j - 1) 
				d2 += arr[i][j]; 
		} 
	} 
	return abs(d1 - d2); 
} 
int main() 
{ 
	int n,m; 
	cin>>n>>m;
	int arr[n][m];
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			cin>>arr[i][j];
	cout << difference(arr, n); 
	return 0; 
} 


#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<math.h>

int main()
{
    int n;
    scanf("%d\n",&n);
    int a[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    while(1)
    {
        int min=a[0];
        int r=0;
        for(int i=0;i<n;i++)
        {
            if(a[i]!=0)
            	r++;
        }
        if(r==0)
        	break;
        printf("%d\n",r);
        r=0;
        for(int i=1;i<n;i++)
        {
            if((a[i]<min) && (a[i]!=0))
            	min=a[i];
            if(min==0)
            	min=a[i];
        }
        for(int i=0;i<n;i++)
        {
            if(a[i]!=0)
            	a[i]-=min;
        }
    }
    return 0;
}

import java.util.HashMap; 
import java.util.Map; 
import java.lang.Math;

public class Main {
 static int pickingNumbers(int[] a) {
  int count=0;
  int max=0;
  Arrays.sort(a);
 
   for(int i=0;i<a.length-1;i++)
      {
      for(int j=i+1;j<a.length;j++)
        {
        if(Math.abs(a[i]-a[j])<=1)
          {
          count++;
          }
       }
        if(count>max)
            max=count;
        count=0;
      }

   return max+1;
}

public static void main(String []args) 
{ 
          
        int n;
        Scanner sc = new Scanner(System.in);
        n== sc.nextInt();
        int [] arr = new int[n];
        for(int i=0; i<n; i++ ) {
           arr[i] = sc.nextInt();
      }
        System.out.println(pickingNumbers(arr));
}

p
#include <iostream>
using namespace std;
int main()
{
	int i, space, rows, k=1;
	cout<<"Enter the number of rows: ";
	cin>>rows;
	for(i=1; i<=rows; i++) 
	{
		for(space=i; space<rows; space++) 
		{
			cout<<"\t";
		}
		for(j=1; j<=i; j++) 
		{
			cout<<k<<"\t";
			k++;
		}
		cout<<"\n";
	}

	return 0;
}