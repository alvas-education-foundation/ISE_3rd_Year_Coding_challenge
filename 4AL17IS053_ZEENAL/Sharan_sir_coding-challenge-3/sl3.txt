
1.)Using whatever programming techniques you know, write the cleanest possible function you can think 
of to print a singly linked list in reverse. The format for the node should be a struct containing 
an integer value, val, and a next pointer to the following node.

Program:-

#include <stdio.h> 
#include <stdlib.h> 
struct Node { 
    int data; 
    struct Node* next; 
}; 
void printReverse(struct Node** head_ref, int n) 
{ 
    int j = 0; 
    struct Node* current = *head_ref; 
    while (current != NULL) { 
        for (int i = 0; i < 2 * (n - j); i++) 
            printf(" ");
        printf("%d\r", current->data); 
   
        current = current->next; 
        j++; 
    } 
} 
void push(struct Node** head_ref, int new_data) 
{ 
    struct Node* new_node =  
          (struct Node*)malloc(sizeof(struct Node)); 
   
    new_node->data = new_data; 
    new_node->next = (*head_ref); 
    (*head_ref) = new_node; 
} 
int printList(struct Node* head) 
{ 
    int i = 0; 
    struct Node* temp = head; 
    while (temp != NULL) { 
        printf("%d  ", temp->data); 
        temp = temp->next; 
        i++; 
    } 
    return i; 
} 
int main() 
{ 
    struct Node* head = NULL; 
    push(&head, 1); 
    push(&head, 2); 
    push(&head, 3); 
    push(&head, 4); 
    push(&head, 5); 
    push(&head, 6); 
   
    printf("Given linked list:\n");
    int n = printList(head); 
    printf("\nReversed Linked list:\n"); 
    printReverse(&head, n); 
    printf("\n"); 
    return 0; 
} 





2.)Write a program that takes an integer and displays the English name of that value.
You should support both positive and negative numbers, in the range supported by a 32-bit integer 
(approximately -2 billion to 2 billion).

Program:-

#include <stdio.h>
#include <math.h>
int main()
{
    int n, num = 0, digits;
    printf("Enter any number to print in words: ");
    scanf("%d", &n);
    digits = (int) log10(n); 
    while(n != 0)
    {
        num = (num * 10) + (n % 10);
        n /= 10;
    }
    digits =  digits - ((int) log10(num));  
    while(num != 0)
    {
        switch(num % 10)
        {
            case 0: 
                printf("Zero ");
                break;
            case 1: 
                printf("One ");
                break;
            case 2: 
                printf("Two ");
                break;
            case 3: 
                printf("Three ");
                break;
            case 4: 
                printf("Four ");
                break;
            case 5: 
                printf("Five ");
                break;
            case 6: 
                printf("Six ");
                break;
            case 7: 
                printf("Seven ");
                break;
            case 8: 
                printf("Eight ");
                break;
            case 9: 
                printf("Nine ");
                break;
        }
        num /= 10;
    }
    while(digits)
    {
        printf("Zero ");
        digits--;
    }
    return 0;
}