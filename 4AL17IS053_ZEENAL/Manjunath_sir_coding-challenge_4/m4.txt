1). Program to count the total number of ways to reach the Nth stair is discussed here.
DESCRIPTION: There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time.
Count the total number of ways, the person can reach the top.
Sample Input:
4 (Number of stairs)
Sample Output:
5 (Number of ways)
Explanation:
Way 1: 1-1-1-1-1
Way 2: 1-2-1
Way 3: 2-1-1
Way 4: 1-1-2
Way 5: 2-2


#include<stdio.h>
int fib(int n)
{
    if(n<=1)
        return n;
    return fib(n-1)+fib(n-2);
}  
int countWays(int s)
{
    return fib(s+1);
}
int main ()
{
    int steps;
    scanf(“%d”,&steps);
    printf(“%d”, countWays(steps));
    return 0;
}  



2. Program to solve Sudoku using backtracking is discussed here.
Given a matrix of 9*9 incomplete sudoku (unassigned places are represented by 0). Check whether you can complete it. If so print the Sudoku or else, print "Np".


#include<iostream>
using namespace std;
int sud[9][9];
bool isSafe(int row,int col,int num)
{
    for(int i=0;i<9;i++)
    {
        if(sud[row][i] == num)
            return false;
        if(sud[i][col] == num)
            return false;
    }
    int rowS=row-row%3,colS=col-col%3;
    for(int i=rowS;i<rowS+3;i++)
    {
        for(int j=colS;j<colS+3;j++)
        {
            if(sud[i][j] == num)
                return false;
        }
    }
    return true;
}
bool solveSudoko()
{
    int row,col;
    bool flag=false;
    for(row=0;row<9;row++)
    {
        for(col=0;col<9;col++)
        {
            if(sud[row][col] == 0)
            {
                flag=true;
                break;
            }
        }
        if(flag)
            break;
    }
    if(!flag)
        return true;
    for(int num = 1;num<10;num++)
    {
        if(isSafe(row,col,num))
        {
            sud[row][col]=num;
            if(solveSudoko())
                return true;
            sud[row][col]=0;
        }
    }
    return false;
}
int main()
{
    for(int i=0;i<9;i++)
        for(int j=0;j<9;j++)
            cin>>sud[i][j];
    if(solveSudoko())
    {
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
                cout<<sud[i][j];
            cout<<endl; 
        }
    }
else
{
cout<<“No”;
 }
}




3.) Program to detect a loop in linked list and removing the loop from the linked list is discussed here. Firstly, let us learn what a loop in a linked list means.
What is a loop in a linked list?
Loop in a linked list means the list can be traversed endlessly. If you traverse a linked list with a loop, the nodes in the linked list will be visited again and again.


#include<stdio.h>
#include< stdlib.h>
struct node
{
    int data;
    struct node *next;
};
void print_list(struct node *head)
{
    while(head)
    {
        printf(“%d “, head->data);
        head = head->next;
    }
    printf(“\n\n”);
}
void insert_front(struct node **head, int dataue)
{
    struct node * new_node = NULL;
    new_node = (struct node *)malloc(sizeof(struct node));
    if (new_node == NULL)
    {
        printf(“\nUnable to allocate memory\n”);
    }
    new_node->data = dataue;
    new_node->next = *head;
    *head = new_node;
}
void create_loop(struct node *head)
{
    struct node *temp = head;
    while(temp->next)
        temp = temp->next;
        temp->next = head->next;
}
void print_loop(struct node *head)
{
    int n = 25;
   while(n–)
    {
        printf(“%d “, head->data);
        head = head->next;
    }
printf(“\n\n”);
}
void detect_loop(struct node *head)
{
    struct node *slow = head;
    struct node *fast = head;
    while(slow && fast->next && fast->next->next)
    {
        if ((slow == fast->next) || (slow == fast->next->next ))
        {
            printf(“\nLinked list has a loop.\n”);
            return;
        }
        slow = slow->next;
        fast = fast->next->next;
    }
     printf(“\nLinked list does not have any loop.\n”);
}
void remove_loop(struct node *head, struct node *loop_node)
{
    struct node *near = head;
    struct node *far = head;
    struct node *ptr = loop_node;
    struct node *prev = NULL;
    while(ptr->next != loop_node)
    {
        ptr = ptr->next;
        far = far->next;
    }
    prev = far;
    far = far->next;
    while(near != far)
    {
        prev = far;
        far = far->next;
        near = near->next;
    }
     prev->next = NULL;
}
void detect_and_remove_loop(struct node *head)
{
    struct node *slow = head;
    struct node *fast = head;
    while(slow && fast->next && fast->next->next)
    {
        if ((slow == fast->next) || (slow == fast->next->next ))
        {
            printf(“\nLinked list has a loop\n”);
            remove_loop(head, slow);
            return;
        }
        slow = slow->next;
        fast = fast->next->next;
    }
 printf(“\nLinked list does not have any loop\n”);
}
int main()
{
    int n, i, data;
    struct node * head = NULL;
    printf(“\nEnter number of elements : “);
    scanf(“%d”, &n);
    printf(“\nEnter the elements : ” );
    for (i = 0; i < n; i++)
    {
        scanf(“%d”, &data);
        insert_front(&head, data);
    }
    printf(“\nThe Linked List is : “);
    print_list(head);
    detect_loop(head);
    printf(“\nCreating loop…\n”);
    create_loop(head);
    printf(“\nPrinting list with loop\n”);
    print_loop(head);
    printf(“\nRemoving loop…\n”);
    detect_and_remove_loop(head);
    printf(“\nList after removing loop:\n”);
    print_list(head);
}

