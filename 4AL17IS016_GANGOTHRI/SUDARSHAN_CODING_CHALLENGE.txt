P-1

def fMean(a, n): 

    sum = 0
    for i in range( 0, n): 
        sum += a[i] 
    return float(sum/n) 
 def findMedian(a, n): 
      sorted(a) 
      if n % 2 != 0: 
        return float(a[n/2])   
    return float((a[int((n-1)/2)] +
                  a[int(n/2)])/2.0) 

a = [ 1, 3, 4, 2, 7, 5, 8, 6 ] 
n = len(a) 
print("Mean =", findMean(a, n)) 
print("Median =", findMedian(a, n))  

P-2

def wMean(X,W,n) : 
    sum = 0
    numWeight = 0
    i = 0
    while  i < n : 

        numWeight = numWeight + X[i] * W[i] 
        sum = sum + W[i] 
        i = i + 1

    return (float)(numWeight / sum) 



X = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
W = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

n = len(X) 
m = len(W) 

if (n == m) : 
    print weightedMean(X, W, n) 
else : 
    print "-1" 

P-3

def median(a, l, r): 
    n = r - l + 1
    n = (n + 1) // 2 - 1
    return n + l 
def IQR(a, n): 
    a.sort() 
    mid_index = median(a, 0, n) 
    Q1 = a[median(a, 0, mid_index)] 
    Q3 = a[mid_index + median(a, mid_index + 1, n)] 
    return (Q3 - Q1) 
if __name__=='__main__': 
    a = [1, 19, 7, 6, 5, 9, 12, 27, 18, 2, 15] 
    n = len(a) 
    print(IQR(a, n)) 

P-3

n = int(input())
data = list(map(int, input().split()))
freq = list(map(int, input().split()))

s = []
for i in range(n):
    s += [data[i]] * freq[i]
N = sum(freq)
s.sort()

if n%2 != 0:
    q1 = st.median(s[:N//2])
    q3 = st.median(s[N//2+1:])
else:
    q1 = st.median(s[:N//2])
    q3 = st.median(s[N//2:])

ir = round(float(q3-q1), 1)
print(ir) 