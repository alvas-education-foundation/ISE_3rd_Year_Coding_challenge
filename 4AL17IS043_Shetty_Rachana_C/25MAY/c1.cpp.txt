1)

class Person {
protected: 
    int age;
    string name;

public:
    virtual void getdata() {
    }   
    virtual void putdata() {
    }       
};

class Student: public Person{
protected: 
    int marks[6];
    int sum = 0;
    static int cur_id2;

public:
    void getdata() {
        cin >> name >> age;

        for(int i = 0; i < 6; i++) {
            cin >> marks[i] ;
            sum = sum + marks[i];
        } 
    }    
    void putdata() {
        cout << name <<" "<< age<<" " << sum <<" "<< cur_id2 << endl;
    } 
    Student() {
        cur_id2++;
    }
};

int Student::cur_id2 = 0;

class Professor: public Person {
protected: 
    int publications;
    static int cur_id1; 

public: 
    void getdata() {
        cin >> name >> age >> publications;
    }
    void putdata() {
        cout << name <<" "<< age <<" "<< publications<<" " << cur_id1 << endl;
    }  

    Professor() {
        cur_id1++;  
    }
};

int Professor::cur_id1 = 0;


2)
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

struct Student
{
int age,standard;
string first_name,last_name;
};

int main() 
{
Student st;
cin >> st.age >> st.first_name >> st.last_name >> st.standard;

cout << st.age << " " << st.first_name << " " << st.last_name << " " << st.standard;

return 0;
}

3)
#include <sstream>
#include <vector>
#include <iostream>
using namespace std;

vector<int> parseInts(string str)
{
stringstream ss(str);
vector<int> out;

char ch;
int temp;

while(ss >> temp)
{
out.push_back(temp);
ss >> ch;
}
return out;
}

int main()
{
string str;
cin >> str;

vector<int> integers = parseInts(str);

for(int i = 0; i < integers.size(); i++)
{
cout << integers[i] << "\n";
}
return 0;
}


4)
#include <iostream>
#include <string>
#include <sstream>
#include <exception>
using namespace std;

struct BadLengthException : public exception {
    int number;    
    public :
        BadLengthException(int n){
            number = n;            
        }

   const char * what () const throw () {
       std::stringstream ss;
       ss << number;
       return ss.str(). c_str();

   }
};

bool checkUsername(string username) {
    bool isValid = true;
    int n = username.length();
    if(n < 5) {
        throw BadLengthException(n);
    }
    for(int i = 0; i < n-1; i++) {
        if(username[i] == 'w' && username[i+1] == 'w') {
            isValid = false;
        }
    }
    return isValid;
}

int main() {
    int T; cin >> T;
    while(T--) {
        string username;
        cin >> username;
        try {
            bool isValid = checkUsername(username);
            if(isValid) {
                cout << "Valid" << '\n';
            } else {
                cout << "Invalid" << '\n';
            }
        } catch (BadLengthException e) {
            cout << "Too short: " << e.what() << '\n';
        }
    }
    return 0;
}


5)
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int main()
{

int n,i;

cin>>n;

vector<int> arr(n);

for(i=0;i<n;i++)
cin>>arr[i]; 
{
sort(arr.begin(),arr.end());
}

for(i=0;i<n;i++)
{
cout<<arr[i]<<" ";
}

return 0;

}