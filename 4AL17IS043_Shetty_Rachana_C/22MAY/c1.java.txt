1)import java.util.*;
import java.io.*;
class Solution{
     public static void main(String []argh) {
          Scanner sc = new Scanner(System.in);
          int t=sc.nextInt();
          for(int i=0;i<t;i++) {
               try {
                    long x=sc.nextLong();
                    System.out.println(x+” can be fitted in:”);
                    if(x>=Byte.MIN_VALUE && x<=Byte.MAX_VALUE) System.out.println(“* byte”);
                    if(x>=Short.MIN_VALUE && x<=Short.MAX_VALUE) System.out.println(“*                               short”);
                    if(x>=Integer.MIN_VALUE && x<=Integer.MAX_VALUE) System.out.println(“*                       int”);
                    if(x>=Long.MIN_VALUE && x<=Long.MAX_VALUE)System.out.println(“* long”);
               }
               catch(Exception e) {
                    System.out.println(sc.next()+” can’t be fitted anywhere.”);
               }
          }
     }
}




2)class Animal{
   void walk()
   {
      System.out.println("I am walking");
   }
}

class Bird extends Animal
{
   void fly()
   {
      System.out.println("I am flying");
   }
    void sing()
   {
      System.out.println("I am singing");
   }
}
public class JavaInheritance1
{

   public static void main(String args[])
   {

     Bird bird = new Bird();
     bird.walk();
     bird.fly();
     bird.sing();
   
   }
}



3)import java.util.*;
class Sports{

   String get_name()
   {
      return "Generic Sports";
   }
   void get_number_of_team_members()
   {
      System.out.println("Each team has n players in "+get_name());
   }
}

class Soccer extends Sports
{
   String get_name()
   {
      return "Soccer Class";
   }
    void get_number_of_team_members()
   {
      System.out.println("Each team has 11 players in "+get_name());
   }
}
public class JavaMethodOverriding
{
   
   public static void main(String []args)
   {
      Sports C1=new Sports();
      Soccer C2=new Soccer();
      System.out.println(C1.get_name());
      C1.get_number_of_team_members();
      System.out.println(C2.get_name());
      C2.get_number_of_team_members();
   }
}



4)import java.util.*;
import java.io.*;


class BiCycle
{
   String define_me()
   {
      return "a vehicel with pedals.";
   }
}

class MotorCycle extends BiCycle
{
   String define_me()
   {
      return "a cycle with an engine.";
   }
   
   MotorCycle()
   {
      
      
      System.out.println("Hello I am a motorcycle, I am "+ define_me());
      String temp=super.define_me(); 
      System.out.println("My ancestor is a cycle who is "+ temp );
   }
   
}
class JavaMethodOverriding2{
   public static void main(String []argh)
   {
      MotorCycle M=new MotorCycle();
   }
}



5)import java.util.*;


class Student{}
class Rockstar{}
class Hacker{}


public class InstanceOFTutorial{
 
   static String count(ArrayList mylist){
      int a = 0,b = 0,c = 0;
      for(int i = 0; i < mylist.size(); i++){
         Object element=mylist.get(i);
         if(element instanceof Student)
            a++;
         if(element instanceof Rockstar)
            b++;
         if(element instanceof Hacker)
            c++;
      }
      String ret = Integer.toString(a)+" "+ Integer.toString(b)+" "+ Integer.toString(c);
      return ret;
   }

   public static void main(String []args){
      ArrayList mylist = new ArrayList();
      Scanner sc = new Scanner(System.in);
      int t = sc.nextInt();
      for(int i=0; i<t; i++){
         String s=sc.next();
         if(s.equals("Student"))mylist.add(new Student());
         if(s.equals("Rockstar"))mylist.add(new Rockstar());
         if(s.equals("Hacker"))mylist.add(new Hacker());
      }
      System.out.println(count(mylist));
   }
}
