 1.program to find the duplicate values of an array of integer values

import numpy as y 
def unique(lst):
    x=y.array(lst)
    print(y.unique(x))
lst=[]
n=int(input("Number of elements"))
for i in range(0,n):
        ele=int(input())
        lst.append(ele)
unique(lst)


2.program to find the index of an array element
import java.util.*;
import java.lang.*;
public class MK {
    static int R = 5;
    static int C = 5;
    static int findMaxSum(int [][]mat)
    {
        if (R < 3 || C < 3)
            return -1;
        int max_sum = Integer.MIN_VALUE;
        for (int i = 0; i < R - 2; i++)
        {
            for (int j = 0; j < C - 2; j++)
            {
                int sum = (mat[i][j] + mat[i][j + 1] +
                        mat[i][j + 2]) + (mat[i + 1][j + 1]) +
                        (mat[i + 2][j] + mat[i + 2][j + 1] +
                                mat[i + 2][j + 2]);
                max_sum = Math.max(max_sum, sum);
            }
        }
        return max_sum;
    }
    static public void main (String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of rows and colomn");
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] mat = new int[m][n];
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                mat[i][j] = sc.nextInt();
            }
        }
        int res = findMaxSum(mat);
        if (res == -1)
            System.out.println("Not possible");
        else
            System.out.println("Maximum sum of hour glass = "
                    + res);
    }


}

3.program to get a date before and after 1 year compares to the current date.

Program:

import java.util.*;
public class Main{
   public static void main(String[] args)
    {
      Calendar cal = Calendar.getInstance();
      Date cdate = cal.getTime();
      cal.add(Calendar.YEAR, 1); 
      Date nyear = cal.getTime();
      cal.add(Calendar.YEAR, -2); 
      Date pyear = cal.getTime();
      System.out.println("\nCurrent Date : " + cdate);
      System.out.println("\nDate before 1 year : " + pyear);
      System.out.println("\nDate after 1 year  : " + nyear+"\n");  	
    }
}

4.

import java.io.*; 
  
class four { 
      
static int R = 5; 
static int C = 5; 
  

static int findMaxSum(int [][]mat) 
{ 
    if (R < 3 || C < 3) 
        return -1; 
  
    
    int max_sum = Integer.MIN_VALUE; 
    for (int i = 0; i < R - 2; i++) 
    { 
        for (int j = 0; j < C - 2; j++) 
        { 
             
            int sum = (mat[i][j] + mat[i][j + 1] +  
                       mat[i][j + 2]) + (mat[i + 1][j + 1]) +  
                       (mat[i + 2][j] + mat[i + 2][j + 1] +  
                       mat[i + 2][j + 2]); 
  
          
            max_sum = Math.max(max_sum, sum); 
        } 
    } 
    return max_sum; 
} 
  
     
    static public void main (String[] args) 
    { 
        int [][]mat = {{1, 2, 3, 0, 0}, 
                       {0, 0, 0, 0, 0}, 
                       {2, 1, 4, 0, 0}, 
                       {0, 0, 0, 0, 0}, 
                       {1, 1, 0, 1, 0}}; 
        int res = findMaxSum(mat); 
        if (res == -1) 
            System.out.println("Not possible"); 
        else
            System.out.println("Maximum sum of hour glass = "
                                + res); 
    } 
      
}