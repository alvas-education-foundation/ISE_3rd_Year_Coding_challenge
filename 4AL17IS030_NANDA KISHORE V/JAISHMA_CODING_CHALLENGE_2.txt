1.Java's System.out.printf function can be used to print formatted output. The purpose of this exercise is to test your 
understanding of formatting output using printf.
SOLUTION:
import java.util.Scanner;

public class Solution {

public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("================================");
        for(int i=0;i<3;i++)
        {
            String s1=sc.next();
            int x=sc.nextInt();
            System.out.printf("%-15s%03d%n", s1, x);
        }
        System.out.println("================================");

}
}
2.	Java has 8 primitive data types; char, boolean, byte, short, int, long, float, and double. For this exercise, we'll work with the primitives used to hold integer values (byte, short, int, and long):
•	A byte is an 8-bit signed integer.
•	A short is a 16-bit signed integer.
•	An int is a 32-bit signed integer.
•	A long is a 64-bit signed integer.
Given an input integer, you must determine which primitive data types are capable of properly storing that input.
To get you started, a portion of the solution is provided for you in the editor.
SOLUTION:
import java.util.*;
import java.io.*;
class Solution{
     public static void main(String []argh) {
          Scanner sc = new Scanner(System.in);
          int t=sc.nextInt();
          for(int i=0;i<t;i++) {
               try {
                    long x=sc.nextLong();
                    System.out.println(x+” can be fitted in:”);
                    if(x>=Byte.MIN_VALUE && x<=Byte.MAX_VALUE) System.out.println(“* byte”);
                    if(x>=Short.MIN_VALUE && x<=Short.MAX_VALUE) System.out.println(“*                               short”);
                    if(x>=Integer.MIN_VALUE && x<=Integer.MAX_VALUE) System.out.println(“*                       int”);
                    if(x>=Long.MIN_VALUE && x<=Long.MAX_VALUE)System.out.println(“* long”);
               }
               catch(Exception e) {
                    System.out.println(sc.next()+” can’t be fitted anywhere.”);
               }
          }
     }
}
3.The challenge here is to read  n lines of input until you reach EOF, then number and print all   n lines of content.
Hint: Java's Scanner.hasNext() method is helpful for this problem.
Input Format
Read some unknown  n  lines of input from stdin(System.in) until you reach EOF; each line of input contains a non-empty String.
Output Format
For each line, print the line number, followed by a single space, and then the line content received as input.
Sample Input
Hello world
I am a file
Read me until end-of-file.
Sample Output
1 Hello world
2 I am a file
3 Read me until end-of-file.
SOLUTION:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int line_num = 0;
        while(sc.hasNext())
        	System.out.println(++line_num + " " + sc.nextLine());
        sc.close();
    }
}