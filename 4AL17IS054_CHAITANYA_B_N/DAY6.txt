PRGM 1:
Python Program for Coin Change

def count(S, m, n): 
    # We need n+1 rows as the table is constructed  
    # in bottom up manner using the base case 0 value 
    # case (n = 0) 
    table = [[0 for x in range(m)] for x in range(n+1)] 
  
    # Fill the entries for 0 value case (n = 0) 
    for i in range(m): 
        table[0][i] = 1
  
    # Fill rest of the table entries in bottom up manner 
    for i in range(1, n+1): 
        for j in range(m): 
  
            # Count of solutions including S[j] 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
  
            # Count of solutions excluding S[j] 
            y = table[i][j-1] if j >= 1 else 0
  
            # total count 
            table[i][j] = x + y 
  
    return table[n][m-1] 
  
# Driver program to test above function 
arr = [1, 2, 3] 
m = len(arr) 
n = 4
print(count(arr, m, n)) 


PRGM 2:
Python Program for Tower of Hanoi

def TowerOfHanoi(n , source, destination, auxilliary): 
    if n==1: 
        print "Move disk 1 from source",source,"to destination",destination 
        return
    TowerOfHanoi(n-1, source, auxilliary, destination) 
    print "Move disk",n,"from source",source,"to destination",destination 
    TowerOfHanoi(n-1, auxilliary, destination, source) 
          
# Driver code 
n = 4
TowerOfHanoi(n,'A','B','C')


PRGM 3:
Python Program for Find sum of odd factors of a number

import math 
  
# Returns sum of all factors 
# of n. 
def sumofoddFactors( n ): 
      
    # Traversing through all  
    # prime factors. 
    res = 1
      
    # ignore even factors by  
    # of 2 
    while n % 2 == 0: 
        n = n // 2
      
    for i in range(3, int(math.sqrt(n) + 1)): 
          
        # While i divides n, print 
        # i and divide n 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1
              
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term 
          
        res *= curr_sum 
      
    # This condition is to 
    # handle the case when 
    # n is a prime number. 
    if n >= 2: 
        res *= (1 + n) 
      
    return res 
  
# Driver code 
n = 30
print(sumofoddFactors(n)) 


PRGM 4:
Python Program for Largest K digit number divisible by X

def answer(X, K): 
      
    # Computing MAX 
    MAX = pow(10, K) - 1
      
    #returning ans 
    return (MAX - (MAX % X)) 
  
X = 30;  
K = 3;  
  
print(answer(X, K));  


PRGM 5:
Python Program for Find the perimeter of a cylinder

def perimeter( diameter, height ) : 
    return 2 * ( diameter + height )  
  
# Driver function 
diameter = 5 ; 
height = 10 ; 
print ("Perimeter = ", 
            perimeter(diameter, height))